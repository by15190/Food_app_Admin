package com.example.food_appadmin

import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.example.food_appadmin.databinding.ActivityAddItemBinding
import com.example.food_appadmin.dataentity.foodItems
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthSettings
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.storage.FirebaseStorage

class AddItemActivity : AppCompatActivity() {
    private lateinit var foodName: String
    private lateinit var foodPrice: String
    private var foodImageURI: Uri? = null
    private lateinit var fooddescription: String
    private lateinit var foodIndegredents: String

    // firebase and database
    private lateinit var auth: FirebaseAuth
    private lateinit var database: FirebaseDatabase

    private val binding: ActivityAddItemBinding by lazy {
        ActivityAddItemBinding.inflate(
            layoutInflater
        )
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // firebase and database
        auth = FirebaseAuth.getInstance()
        database = FirebaseDatabase.getInstance()

        // back btn
        binding.backbtn.setOnClickListener { finish() }

        // for image picker
        binding.selectimage.setOnClickListener {
            pickimage.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly))
        }

        binding
            .additembutton.setOnClickListener {

                // getting the data from the edit text
                /// and getting the uri of the image from the pickimage variable
                foodName = binding.itemname.text.toString().trim()
                foodPrice = binding.itemprice.text.toString().trim()
                fooddescription = binding.itemdescription.text.toString().trim()
                foodIndegredents = binding.itemingredients.text.toString().trim()

                if (foodName.isBlank() || foodPrice.isBlank() || fooddescription.isBlank() || foodIndegredents.isBlank()) {
                    Toast.makeText(this, "Filled all the details", Toast.LENGTH_SHORT).show()
                } else {
                    uploaditem()
                    Toast.makeText(this, "item added successfully", Toast.LENGTH_SHORT).show()
                    finish()
                }
            }
    }

    private fun uploaditem() {

        // database reference
        val Menuref =
            database.getReference("menu") //This gets a reference to the "menu" child node in the Firebase Realtime Database.
        // Generate a key unique for each menu item
        val newKey = Menuref.push().key
        // /// This generates a new, unique child node under the "menu" reference.
        // /// Retrieves the unique key generated by push().

        /// firebase cloud storage to upload the image to the firebase cloud storage
        val storageRef = FirebaseStorage.getInstance().reference
        val imageRef = storageRef.child("menu_images/${newKey}.jpg")
        val uploadimage = imageRef.putFile(foodImageURI!!)
        uploadimage.addOnSuccessListener {
            imageRef.downloadUrl.addOnSuccessListener { downloadURI ->
                val newItem = foodItems(
                    newKey.toString(),
                    foodName,
                    foodPrice,
                    downloadURI.toString(),
                    fooddescription,
                    foodIndegredents
                )
                newKey.let { key ->
                    Menuref.child(key!!).setValue(newItem).addOnSuccessListener {
                        Toast.makeText(this, "data uploaded successfully", Toast.LENGTH_SHORT)
                            .show()
                    }
                }
            }.addOnFailureListener {
                Toast.makeText(this, "image uploaded failed", Toast.LENGTH_SHORT)
                    .show()
            }

        }
    }


    val pickimage = registerForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri ->

        //  getting the image uri and putting it in the foodImageURI
        foodImageURI = uri

        //  setting it to the image view
        if (uri != null) {
            binding.itemimage.setImageURI(uri)
        }
    }
}